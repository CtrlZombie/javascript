document.addEventListener("DOMContentLoaded", function () {
  // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
  const taskInput = document.getElementById("taskInput");
  const addTaskBtn = document.getElementById("addTaskBtn");
  const taskList = document.getElementById("taskList");
  const showAllBtn = document.getElementById("showAll");
  const showActiveBtn = document.getElementById("showActive");
  const showCompletedBtn = document.getElementById("showCompleted");
  const notification = document.getElementById("notification");
  const notificationText = document.getElementById("notificationText");
  const totalTasksElem = document.getElementById("totalTasks");
  const completedTasksElem = document.getElementById("completedTasks");
  const activeTasksElem = document.getElementById("activeTasks");

  let tasks = [];
  let currentFilter = "all";

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  function init() {
    setupEventListeners();
    loadTasksFromStorage();
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  function setupEventListeners() {
    addTaskBtn.addEventListener("click", addTask);

    taskInput.addEventListener("keypress", function (e) {
      if (e.key === "Enter") {
        addTask();
      }
    });

    showAllBtn.addEventListener("click", () => filterTasks("all"));
    showActiveBtn.addEventListener("click", () => filterTasks("active"));
    showCompletedBtn.addEventListener("click", () => filterTasks("completed"));
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ localStorage
  function loadTasksFromStorage() {
    const storedTasks = localStorage.getItem("todoTasks");

    // –í—Å–µ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
    fetchTasksFromServer()
      .then(() => {
        // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
        if (storedTasks) {
          const localTasks = JSON.parse(storedTasks);

          // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–¥–∞—á–∏, –æ—Ç–¥–∞–≤–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–º
          const mergedTasks = localTasks.map((localTask) => {
            const serverTask = tasks.find((t) => t.id === localTask.id);
            if (serverTask) {
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ localStorage
              return { ...serverTask, completed: localTask.completed };
            }
            return localTask;
          });

          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          localTasks.forEach((localTask) => {
            if (!mergedTasks.some((t) => t.id === localTask.id)) {
              mergedTasks.push(localTask);
            }
          });

          tasks = mergedTasks;
        }

        saveTasksToStorage();
        renderTasks();
      })
      .catch((error) => {
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage
        if (storedTasks) {
          tasks = JSON.parse(storedTasks);
          renderTasks();
        } else {
          taskList.innerHTML =
            '<div class="empty-state"><i>üìù</i><p>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç</p><p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!</p></div>';
        }
      });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á —Å —Å–µ—Ä–≤–µ—Ä–∞
  async function fetchTasksFromServer() {
    try {
      taskList.innerHTML =
        '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á —Å —Å–µ—Ä–≤–µ—Ä–∞</div>';

      const response = await fetch(
        "https://jsonplaceholder.typicode.com/todos?_limit=5"
      );

      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á —Å —Å–µ—Ä–≤–µ—Ä–∞");
      }

      const serverTasks = await response.json();

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–¥–∞—á–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
      tasks = serverTasks.map((task) => ({
        id: task.id,
        text: task.title,
        completed: task.completed,
        reminder: false,
        reminderTimeout: null,
        reminderTime: null,
      }));

      return tasks;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:", error);
      throw error;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ localStorage
  function saveTasksToStorage() {
    localStorage.setItem("todoTasks", JSON.stringify(tasks));
    updateStats();
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  function showNotification(message, isError = false) {
    notificationText.textContent = message;
    notification.classList.remove("error");

    if (isError) {
      notification.classList.add("error");
    }

    notification.classList.add("show");

    setTimeout(() => {
      notification.classList.remove("show");
    }, 3000);
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  function addTask() {
    const text = taskInput.value.trim();

    if (text === "") {
      showNotification("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏", true);
      return;
    }

    const newTask = {
      id: Date.now(),
      text: text,
      completed: false,
      reminder: false,
      reminderTimeout: null,
      reminderTime: null,
    };

    tasks.push(newTask);
    saveTasksToStorage();
    renderTasks();

    taskInput.value = "";
    taskInput.focus();

    showNotification("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞");
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  function deleteTask(id) {
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const taskToDelete = tasks.find((task) => task.id === id);
    if (taskToDelete && taskToDelete.reminderTimeout) {
      clearTimeout(taskToDelete.reminderTimeout);
    }

    tasks = tasks.filter((task) => task.id !== id);
    saveTasksToStorage();
    renderTasks();

    showNotification("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞");
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  function toggleTaskCompletion(id) {
    tasks = tasks.map((task) => {
      if (task.id === id) {
        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if (!task.completed && task.reminderTimeout) {
          clearTimeout(task.reminderTimeout);
          return {
            ...task,
            completed: true,
            reminder: false,
            reminderTimeout: null,
            reminderTime: null,
          };
        }
        return { ...task, completed: !task.completed };
      }
      return task;
    });

    saveTasksToStorage();
    renderTasks();
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  function toggleReminder(id) {
    const taskIndex = tasks.findIndex((t) => t.id === id);
    if (taskIndex === -1) return;

    const task = tasks[taskIndex];

    // –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if (task.reminder) {
      if (task.reminderTimeout) {
        clearTimeout(task.reminderTimeout);
      }
      tasks[taskIndex] = {
        ...task,
        reminder: false,
        reminderTimeout: null,
        reminderTime: null,
      };
      showNotification("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ");
      saveTasksToStorage();
      renderTasks();
      return;
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    const timeInput = prompt("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):");
    if (!timeInput || isNaN(timeInput) || timeInput <= 0) {
      showNotification("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö", true);
      return;
    }

    const timeInSeconds = parseInt(timeInput);

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç, –µ—Å–ª–∏ –±—ã–ª
    if (task.reminderTimeout) {
      clearTimeout(task.reminderTimeout);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç
    const reminderTimeout = setTimeout(() => {
      showNotification(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "${task.text}"`, false);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      tasks = tasks.map((t) => {
        if (t.id === id) {
          return {
            ...t,
            reminder: false,
            reminderTimeout: null,
            reminderTime: null,
          };
        }
        return t;
      });
      saveTasksToStorage();
      renderTasks();
    }, timeInSeconds * 1000);

    tasks[taskIndex] = {
      ...task,
      reminder: true,
      reminderTimeout: reminderTimeout,
      reminderTime: timeInSeconds,
    };

    showNotification(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${timeInSeconds} —Å–µ–∫—É–Ω–¥`);
    saveTasksToStorage();
    renderTasks();
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
  function filterTasks(filter) {
    currentFilter = filter;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    showAllBtn.classList.remove("active");
    showActiveBtn.classList.remove("active");
    showCompletedBtn.classList.remove("active");

    if (filter === "all") showAllBtn.classList.add("active");
    if (filter === "active") showActiveBtn.classList.add("active");
    if (filter === "completed") showCompletedBtn.classList.add("active");

    renderTasks();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  function updateStats() {
    const total = tasks.length;
    const completed = tasks.filter((task) => task.completed).length;
    const active = total - completed;

    totalTasksElem.textContent = total;
    completedTasksElem.textContent = completed;
    activeTasksElem.textContent = active;
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
  function renderTasks() {
    let filteredTasks = tasks;

    if (currentFilter === "active") {
      filteredTasks = tasks.filter((task) => !task.completed);
    } else if (currentFilter === "completed") {
      filteredTasks = tasks.filter((task) => task.completed);
    }

    if (filteredTasks.length === 0) {
      let message = "";

      if (currentFilter === "all") message = "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç";
      else if (currentFilter === "active") message = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á";
      else if (currentFilter === "completed") message = "–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á";

      taskList.innerHTML = `
                <div class="empty-state">
                    <i>${currentFilter === "completed" ? "‚úÖ" : "üìù"}</i>
                    <p>${message}</p>
                    <p>${
                      currentFilter === "all"
                        ? "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!"
                        : "–ò–∑–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á"
                    }</p>
                </div>
            `;
      return;
    }

    taskList.innerHTML = "";

    filteredTasks.forEach((task) => {
      const taskItem = document.createElement("li");
      taskItem.className = "task-item";

      if (task.completed) {
        taskItem.classList.add("completed");
      }

      if (task.reminder) {
        taskItem.classList.add("reminder");
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      taskItem.innerHTML = `
                <input type="checkbox" class="task-checkbox" ${
                  task.completed ? "checked" : ""
                }>
                <span class="task-text">${task.text}</span>
                <div class="task-actions">
                    <button class="reminder-btn ${
                      task.reminder ? "active" : ""
                    }" ${task.completed ? 'style="display:none;"' : ""}>
                        ${task.reminder ? `‚è∞ ${task.reminderTime}s` : "üîî"}
                    </button>
                    <button class="delete-btn">üóëÔ∏è</button>
                </div>
            `;

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      const checkbox = taskItem.querySelector(".task-checkbox");
      checkbox.addEventListener("change", () => toggleTaskCompletion(task.id));

      const deleteBtn = taskItem.querySelector(".delete-btn");
      deleteBtn.addEventListener("click", () => deleteTask(task.id));

      const reminderBtn = taskItem.querySelector(".reminder-btn");
      if (!task.completed) {
        reminderBtn.addEventListener("click", () => toggleReminder(task.id));
      }

      taskList.appendChild(taskItem);
    });

    updateStats();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  init();
});

